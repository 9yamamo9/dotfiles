" Genenal {{{1
set foldmethod=marker                      " マーカーを折りたたむ設定
set fenc=utf-8                             " 文字コードをUTF-8に設定
set nobackup                               " バックアップファイルを作成しない
set noswapfile                             " スワップファイルを作成しない
set autoread                               " 編集中のファイルが変更されたら自動で読み直す
set hidden                                 " バッフォが編集中でもその他のファイルを開けるようにする
set showcmd                                " 入力中のコマンドをステータスに表示する
set number                                 " 行番号を表示する
set backspace=indent,eol,start             " バックスペースでなんでも消せるようにする
set formatoptions=lmoq                     " テキスト整形オプション、マルチバイト系を追加
set vb t_vb=                               " ビープを鳴らさない
set whichwrap=b,s,h,l,<,>,[,]              " カーソルを行頭、行末でも止まらないようにする
set scrolloff=5                            " スクロール時の余白確保
set textwidth=0                            " 一行に長い文章を書いても自動折り返しをしない
set virtualedit=onemore                    " 行末の1文字先までカーソルを移動できるようにする
set smartindent                            " スマートインデントにする
set showmatch                              " 括弧入力時の対応する括弧を表示する
set showmode                               " 現在のモードを表示
set wildmode=list:longest                  " コマンドラインの補完
set list listchars=tab:\>\-                " Tab文字を可視化する
set expandtab                              " Tab文字を半角スペースにする
" }}}1
" Color Scheme {{{1
:syntax on                                 " 文字に色をつける
let g:rehash256 = 1
let g:molokai_original = 1
colorscheme molokai                        " カラースキーム指定
set t_Co=256
" }}}1
" NeoBundle {{{1
if has('vim_starting')
  set nocompatible
  " NeoBundleをインストールしていない場合は自動インストール
  if !isdirectory(expand("~/.vim/bundle/neobundle.vim/"))
    echo "install NeoBundle..."
    :call system("git clone git://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim")
  endif
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle'))

" Required:
NeoBundleFetch 'Shouge/neobundle.vim'

" プラグイン管理 {{{2
NeoBundle 'fatih/vim-go'                    " Go 初期インストール後は:GoInstallBinnariesを実行する
"NeoBundle 'SirVer/ultisnips'                " Goのスニペット
NeoBundle 'tpope/vim-markdown'              " Markdown記法
NeoBundle 'previm/previm'                   " Markdownプレビュー
NeoBundle 'tpope/vim-surround'              " cs*+ *を+へ置換する、ds( ()を削除する
NeoBundle 'airblade/vim-gitgutter'          " gitの差分(削除/追加/変更)を表示する
NeoBundle 'tpope/vim-repeat'                " *によりvim操作を繰り返す
NeoBundle 'tomtom/tcomment_vim'             " 複数行のコメントアウトを行う shift+v で導入
NeoBundle 'vim-airline/vim-airline'         " ステータスバー
NeoBundle 'vim-airline/vim-airline-themes'  " ステータスバーのテーマ
NeoBundle 'sheerun/vim-polyglot'            " 様々な言語のシンタックスやインデントを提供するプラグイン
NeoBundle 'ryanoasis/vim-devicons'          " ファイルタイプアイコン
NeoBundle 'Shougo/unite.vim'                " ディレクトリやフィアル管理
NeoBundle 'scrooloose/nerdtree'             " ファイルをツリー構造で表示する
NeoBundle 'hashivim/vim-terraform'          " Terraform
NeoBundle 'ekalinin/Dockerfile.vim'
NeoBundle 'Vimjas/vim-python-pep8-indent'   " pep8準拠のindent
NeoBundle 'vim-syntastic/syntastic'
NeoBundle 'juliosueiras/vim-terraform-completion' " terraformの補完

" deloplete {{{3
" NeoBundle 'Shougo/deoplete.nvim'            " Vim8で動作する高速な補完プラグイン
" NeoBundle 'roxma/nvim-yarp'
" NeoBundle 'roxma/vim-hug-neovim-rpc'
" if neobundle#tap('deoplete.nvim')
"        let s:hooks = neobundle#get_hooks('deoplete.nvim')
"        function! s:hooks.on_source(bundle)
"                let g:deoplete#enable_at_startup = 1
"       endfunction
"endif
"NeoBundle 'Shougo/neosnippet.vim'
"NeoBundle 'Shougo/neosnippet-snippets'
"NeoBundle 'Shougo/denite.nvim'              " ファイルランチャ
"NeoBundle 'zchee/deoplete-go'
"NeoBundle 'zchee/deoplete-jedi'
" }}}3
" }}}2

call neobundle#end()

" Required:
filetype plugin indent on

NeoBundleCheck
" }}}1
" Command  Setting {{{1
" ---------------------
"  Common
" ---------------------
noremap <S-h> ^
noremap <S-j> }
noremap <S-k> {
noremap <S-l> $
imap { {}<LEFT>
imap [ []<LEFT>
imap ( ()<LEFT>

" Move Tab Setting {{{2
nnoremap s <Nop>
nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l
nnoremap sh <C-w>h
nnoremap sJ <C-w>J
nnoremap sK <C-w>K
nnoremap sL <C-w>L
nnoremap sH <C-w>H
nnoremap sn gt
nnoremap sp gT
nnoremap sr <C-w>r
nnoremap s= <C-w>=
nnoremap sw <C-w>w
nnoremap so <C-w>_<C-w>|
nnoremap sO <C-w>=
nnoremap sN :<C-u>bn<CR>
nnoremap sP :<C-u>bp<CR>
nnoremap st :<C-u>tabnew<CR>
nnoremap sT :<C-u>Unite tab<CR>
nnoremap ss :<C-u>sp<CR>
nnoremap sv :<C-u>vs<CR>
nnoremap sq :<C-u>q<CR>
nnoremap sQ :<C-u>bd<CR>
nnoremap sb :<C-u>Unite buffer_tab -buffer-name=file<CR>
nnoremap sB :<C-u>Unite buffer -buffer-name=file<CR>
" }}}2

" ---------------------
"  deoplete
" ---------------------
"let g:python_host_prog = '/Users/yutayamamori/.pyenv/shims/python2'
"let g:python3_host_prog = '/Users/yutayamamori/.pyenv/shims/python3'
"let g:ruby_host_prog = '/usr/local/bin/neovim-ruby-host'
"let g:deoplete#auto_completion_start_length = 1
"call deoplete#custom#option('omni_patterns', { 'go': '[^. *\t]\.\w*' })

" ---------------------
"  Markdown
" ---------------------
let g:previm_open_cmd = 'open -a Google\ Chrome' " PrevimOpenを実施するとChromeにてプレビューが開く

" ---------------------
"  Airline
" ---------------------
let g:airline_theme = 'molokai' " Airlineのテーマを指定
set laststatus=2
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#enabled = 1           " ファイルをタブ管理する
let g:airline#extensions#branch#enabled = 1            " GitのBranchを表示する
nmap <C-p> <Plug>AirlineSelectPrevTab
nmap <C-n> <Plug>AirlineSelectNextTab

" ---------------------
"  Go
" ---------------------
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:go_version_warning = 0
let g:go_fmt_command = "goimports"
let g:go_metalinter_enable = ['vet', 'golint', 'errcheck']
let g:go_metalinter_autosave = 1
let g:go_metalinter_autosave_enabled = ['vet', 'golint']
let g:go_metalinter_deadline = "5s" " linterのタイムアウトを指定
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_def_mode = 'godef'
let g:go_auto_type_info = 1 " 自動で:GoInfoを実行
let g:go_auto_sameids = 1 " 同一の関数や変数に対して自動でハイライトする
let g:go_gocode_propose_source = 0 " 自動補完する
autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4 " タブスペースを4つにする

" ---------------------
"  NerdTree
" ---------------------
" autocmd vimenter * NERDTree "vim起動時にNERDTreeを合わせて起動する
autocmd StdinReadPre * let s:std_in = 1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
nnoremap <silent><C-e> :NERDTreeToggle<CR>

" ---------------------
"  Syntastic
" ---------------------
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" (Optional)Remove Info(Preview) window
set completeopt-=preview

" (Optional)Hide Info(Preview) window after completions
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" (Optional) Enable terraform plan to be include in filter
let g:syntastic_terraform_tffilter_plan = 1

" (Optional) Default: 0, enable(1)/disable(0) plugin's keymapping
let g:terraform_completion_keys = 1

" (Optional) Default: 1, enable(1)/disable(0) terraform module registry completion
let g:terraform_registry_module_completion = 0

" ---------------------
"  Unite
" ---------------------
let g:unite_enable_start_insert=1                      " 入力モードで開始する
noremap <C-P> :Unite buffer<CR>                        
noremap <C-N> :Unite -buffer-name=file file<CR>        
noremap <C-Z> :Unite file_mru<CR>                      
" ウィンドを横に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
" ウィンドを縦に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>

" ---------------------
"  Terraform
" ---------------------
let g:terraform_align=1
let g:terraform_fold_sections=1
let g:terraform_remap_spacebar=1
let g:terraform_fmt_on_save=1
"}}1
  
