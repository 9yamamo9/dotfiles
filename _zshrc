# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

#--------------------------------------------------
# 一般設定
#--------------------------------------------------
export EDITORP=vim
export LANG=ja_JP.UTF-8
autoload -Uz colors
colors

setopt correct #コマンドミスを修正
chpwd() { ls -ltrG }

#--------------------------------------------------
# Prompt設定
#--------------------------------------------------
#PROMPT='[%~:%n] %# '
if [ $UID -eq 0 ]; then
  PROMPT="%F{red}%n:%f%F{green}%~%f %% "
else
  PROMPT="%F{cyan}%n:%f%F{green}%~%f %% "
fi

#--------------------------------------------------
# keybind設定
#--------------------------------------------------
bindkey '^r' history-incremental-pattern-search-backward
bindkey '^s' history-incremental-pattern-search-forward

# コマンドを途中まで入力後、historyから絞り込み
autoload -Uz history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey '^p' history-beginning-search-backward-end
bindkey '^b' history-beginning-search-forward-end

#--------------------------------------------------
# GitのPrompt設定
#--------------------------------------------------
function rprompt-git-current-branch {
  local branch_name st branch_status

  if [ ! -e ".git" ]; then
    return #gitで管理されていないディレクトリでは何も返さない
  fi

  branch_name=`git rev-parse --abbrev-ref HEAD 2> /dev/null`
  st=`git status 2> /dev/null`

  if [[ -n `echo "$st" | grep "^nothing to"` ]]; then
    branch_status="%F{green}" #全てcommitされていてクリーンな状態
  elif [[ -n `echo "$st" | grep "^Untracked files"`  ]]; then
    branch_status="%F{red}?" #gitに管理されていないファイルがある状態
  elif [[ -n `echo "$st" | grep "^Changes not staged for commit"` ]]; then
    branch_status="%F{red}+" #git addされていないファイルがある状態
  elif [[ -n `echo "$st" | grep "^Changes to be committed"` ]]; then
    branch_status="%F{yellow}!" #git commitされていないファイルがある状態
  elif [[ -n `echo "$st" | grep "^rebase in progress"` ]]; then
    branch_status="%F{red}!(no branch)" #コンフリクトが起こった状態
    return
  else
    branch_status="%F{blue}" #上記意外の状態の場合は青字で表示させる
  fi
  echo "${branch_status}[$branch_name]"
}

# プロンプトが表示されるたびにプロンプト文字列を評価、置換する
setopt prompt_subst

# プロンプトの右側(RPROMPT)にメソッドの結果を表示させる
RPROMPT='`rprompt-git-current-branch`'

#--------------------------------------------------
# GoのPATHの読み込み
#--------------------------------------------------
export GOPATH="$HOME/go"
export PATH="$GOPATH/bin:$PATH"

#--------------------------------------------------
# PythonのPATHの読み込み
#--------------------------------------------------
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

#--------------------------------------------------
# HISTORYの設定 
#--------------------------------------------------
HISTFILE=${HOME}/.zsh_history
HISTSIZE=100000
SAVEHIST=100000
setopt hist_ignore_dups #直前のコマンドと同じ場合は履歴に追加しない
setopt extended_history #履歴に日付を記載する
setopt share_history

#--------------------------------------------------
# 補完機能の設定 
#--------------------------------------------------
autoload -Uz compinit
compinit

setopt auto_param_slash      # ディレクトリ名の補完で末尾の / を自動的に付加し、次の補完に備える

#"----------------------------------
#" Alias設定
#"----------------------------------
alias cdf="cd /Users/yutayamamori/workstation/flathand"
alias gga="git log --graph --all --abbrev-commit --date=relative --pretty=format:'%C(red)%h %C(reset)-%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'"
alias gf="git fetch -p"
alias gs="git status"
alias gd="git diff"
