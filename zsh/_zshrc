# --------------------
# General Setting
# --------------------
export EDITORP=vim
export LANG=ja_JP.UTF-8
autoload -Uz colors
colors

setopt correct #コマンドミスを修正
chpwd() { ls -ltrG }

setopt auto_list # 補完候補を一覧表示する

setopt auto_menu # 補完候補を順に切り替える

autoload -Uz compinit

compinit -i

zstyle ':completion:*:defalut' menu select=1

# lsコマンドでのデータ種類別の色を指定
export LSCOLORS=gxfxcxdxbxegedabagacad
export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
zstyle ':completion:*default' list-colors ${(s.:.)LS_COLORS}

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' # 大文字、小文字を区別せず補完する

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([%0-9]#)*=0=01;31' # kill候補に色付けする

zstyle ':completion:*' insert-tab false # 何も入力されていないときのTABでTABが挿入されるのを抑制

zstyle ':completion:*' completer _complete _approximate _prefix
zstyle ':completion:*:approximate' max-errors 2 NUMERIC

setopt print_eight_bit # 日本語ファイル名を表示可能にする

setopt auto_cd # ディレクトリ名のみでcdする

setopt auto_pushd # cdしたら自動的にpushdする

# 予測変換
autoload predict-on
zle -N predict-on
zle -N predict-off
bindkey '^X^P' predict-on
bindkey '^O' predict-off
zstyle ':predict' verbose true


# --------------------
# INPORTS
# --------------------
source ~/.zplug/init.zsh

# --------------------
# PLUGINS
# --------------------
# zsh-completions
fpath=(~/.zplug/repos/zsh-users/zsh-completions/src ~/.zsh/completion $fpath)

# --------------------
# zplug
# --------------------
zplug "zsh-users/zsh-syntax-highlighting", defer:2
zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-autosuggestions"
zplug "zsh-users/zsh-history-substring-search"
zplug "chrissicool/zsh-256color"

# --------------------
# 該当するプラグインがインストールされていなかった場合のチェック
# --------------------
if ! zplug check --verbose; then
        printf "Install? (y/N): "
        if read -q; then
                echo; zplug install
        fi
fi
zplug load
setopt nonomatch
#export ZSH_HIGHLIGHT_STYLES[path]='fg=081'

# --------------------
# Pyenv Setting
# --------------------
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi

# --------------------
# Go Setting
# --------------------
export GOROOT=$HOME/go
export GOPATH=$HOME/workspace
export PATH=$PATH:$HOME/go/bin:$GOPATH/bin
export GO111MODULE=on

# --------------------
# Flutter Setting
# --------------------
export PATH="$PATH:$HOME/flutter/bin"

# --------------------
# Android Setting
# --------------------
export PATH=$PATH:/Users/yutayamamori/Library/Android/sdk/platform-tools

# --------------------
# AWS CLI Setting
# --------------------
export PATH=$HOME/.local/bin:$PATH

# --------------------
# ruby setting
# --------------------
export PATH=$HOME/.rbenv/bin:$PATH
eval "$(rbenv init -)"

# --------------------
# node setting
# --------------------
export PATH="$HOME/.nodenv/bin:$PATH"
eval "$(nodenv init -)"

# --------------------
# track setting
# --------------------
export PATH="/usr/local/bin:$PATH"

# --------------------
# direnv Setting
# --------------------
eval "$(direnv hook zsh)"

# --------------------
# Keybind Setting
# --------------------
bindkey '^[[r' history-incremental-pattern-search-backword
bindkey '^[[s' history-incremental-pattern-search-forword

# --------------------
# コマンドを途中まで入力後、historyから絞り込み
# --------------------
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^p" history-beginning-search-backward-end
bindkey "^n" history-beginning-search-forward-end

# --------------------
# Promt Setting
# --------------------
#PROMPT='[%~:%n] %# '
if [ $UID -eq 0 ];then
PROMPT="
Today's Date: %F{magenta}%D %*%f 
User: %F{red}%n%f@%F{yellow}%m%f
CurrentDir: %F{green}%~%f
%% "
else
PROMPT="
Today's Date: %F{214}%D %*%f
User: %F{cyan}%n%f@%F{yellow}%m%f
CurrentDir: %F{green}%~%f
%% "
fi

# --------------------
# History Setting
# --------------------
HISTFILE=${HOME}/.zsh_history
HISTSIZE=100000
SAVEHIST=100000
setopt hist_ignore_dups #直前のコマンドと同じ場合、履歴に追加しない
setopt extended_history #履歴に日付も入れる
setopt share_history
setopt hist_no_store #historyコマンドは履歴に登録しない

# --------------------
# Alias Setting
# --------------------
alias cdy="cd ~/workspace/yamori"
alias cdi="cd ~/workspace/imori"
alias cdf="cd ~/workspace/flatact"
alias cda="cd ~/workspace/src/flathandaction"
alias ls="ls -G"
alias l="ls -F"
alias ll="l -ltr"
alias la="ll -a"
alias u="cd .."
alias uu="cd ../.."
alias uuu="cd ../../.."
alias b="popd"
alias gga="git log --graph --all --abbrev-commit --date=relative --pretty=format:'%C(red)%h %C(reset)-%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'"
alias gb="git branch"
alias gba="gd -a"
alias gbr="gb -r"
alias gf="git fetch -p"
alias gs="git status"
alias gd="git diff"
alias co="checkout"
alias dp="docker ps"
alias di="docker images"
alias de='docker exec -it $(docker ps | peco | cut -d " " -f 1) /bin/bash'

# --------------------
# Git Branch Output Prompt Setting
# --------------------
function rprompt-git-current-branch {
  local branch_name st branch_status

  if [ ! -e ".git" ]; then
    return #gitで管理されていないディレクトリは何も返さない
  fi

  branch_name=`git rev-parse --abbrev-ref HEAD 2> /dev/null`
  st=`git status 2> /dev/null`

  if [[ -n `echo "$st" | grep "^nothing to"` ]]; then
    branch_status="%F{green}" #全てcommitされてクリーンな状態
  elif [[ -n `echo "$st" | grep "^Untracked files"` ]]; then
    branch_status="%F{red}?" #gitに管理されていないファイルがある状態
  elif [[ -n `echo "$st" | grep "^Changes not staged for commit"` ]]; then
    branch_status="%F{red}+" #git addされていないファイルがある状態
  elif [[ -n `echo "$st" | grep "^Changes to be committed"` ]]; then
    branch_status="%F{yellow}!" #git commitされていないファイルがある状態
  elif [[ -n `echo "$st" | grep "^rebase in progress"` ]]; then
    branch_status="%F{red}!(no branch)" #コンフリクトが起こった状態
    return
  else
    baranch_status="%F{blue}" #上記以外のじょうたい　の場合は青字で表示させる
  fi
  echo "${branch_status}[$branch_name]"
}

# --------------------
# pecoによりコマンド検索を強化する
# --------------------
function peco-select-history() {
    BUFFER=$(\history -n -r 1 | peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}
zle -N peco-select-history
bindkey '^r' peco-select-history

function peco-get-destination-from-cdr() {
    cdr -l | \
    sed -e 's/^[[:digit:]]*[[:blank:]]*//' | \
    peco --query "$LBUFFER"
}

# --------------------
# プロンプトが表示されるたびにプロンプト文字列を評価、置換する
# --------------------
setopt prompt_subst

# --------------------
# プロンプトの右側(RPROMPT)にメソッドの結果を表示させる
# --------------------
RPROMPT='`rprompt-git-current-branch`'
